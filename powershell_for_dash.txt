#log script obtained from
#https://community.spiceworks.com/topic/1233789-add-logging-to-powershell-script

#$LogPath = Split-Path $MyInvocation.MyCommand.Path
#Get-ChildItem "$LogPath\*.log" | 
#Where LastWriteTime -LT (Get-Date).AddDays(-15) | Remove-Item -Confirm:$false
#$LogPathName = Join-Path -Path $LogPath 
#-ChildPath "$($MyInvocation.MyCommand.Name)-$(Get-Date -Format 'MM-dd-yyyy').log"
#Start-Transcript $LogPathName -Append

$StartDate = (Get-Date)

#dash button script. Change the $dashButtonMac variable to the address of the dash button.

$dashButtonMac = "ac:63:be:e1:df:6e"

$endpoint = new-object System.Net.IPEndPoint ([system.net.ipaddress]::any, 67)
$listenHost = new-object System.Net.Sockets.UdpClient
$listenHost.Client.SetSocketOption([System.Net.Sockets.SocketOptionLevel]::Socket, 
[System.Net.Sockets.SocketOptionName]::ReuseAddress, $True);
$bindEndPoint = new-object System.Net.IPEndPoint([system.net.ipaddress]::any, 67)
$listenHost.client.Bind($bindEndPoint)

$delay = Get-Date

while($true){
    $payload = $listenHost.Receive([ref] $endpoint)
    if($payload[0] -eq 1 -and $payload[242] -eq 3 -and ((Get-Date) - $delay).seconds -gt 5)
          { #filter for DHCP Request messages only. byte 242 checks option 53's value of 3
        $delay = Get-Date
        $clientMac = 0,0,0,0,0,0
        [array]::Copy($payload, 28,$clientMac,0,6)
        for($i = 0; $i -lt $clientMac.Count; $i++){
            $clientMac[$i] = "{0:x2}" -f $clientMac[$i]
        }
        $mac = $clientMac -join ':'
        if($mac -eq $dashButtonMac){
            Write-Output ("Dash Button has been detected : " + $mac)
         #data To find your next clue, press the button shown below (hidden near Alexa)
         #img https://paulfelce.github.io/th/nobo.jpg   
            $node = @{
                data='Well done Amy, your next clue is hidden by the TV'
                }
$json = $node | ConvertTo-Json
$response = Invoke-RestMethod 'https://blinding-fire-6477.firebaseio.com/th/node1.json' -Method Put -Body $json -ContentType 'application/json'
write-host $response



            $SmtpServer = 'smtp.live.com'
            $SmtpUser = 'paulfelce@hotmail.com'
            $smtpPassword = 'rEymat48'
$MailtTo = 'paulfelce@gmail.com'
$MailFrom = 'paulfelce@hotmail.com'
$MailSubject = "Dash button has been clicked $SmtpServer" 

$Credentials = New-Object System.Management.Automation.PSCredential -ArgumentList $SmtpUser, $($smtpPassword | ConvertTo-SecureString -AsPlainText -Force) 
Send-MailMessage -To "$MailtTo" -from "$MailFrom" -Subject $MailSubject -SmtpServer $SmtpServer -UseSsl -Credential $Credentials -Body "Hi, your next clue is REALLY hard to find"



        }
        else{
            Write-Output ("Valid DHCP Request message obtained but not from Dash button : " + $mac)
            # optionaly do something else
        }
    }
    Start-Sleep -Milliseconds 100
}
